import socket
import concurrent.futures
import json

# List of common services for basic vulnerability analysis
COMMON_PORTS = {
    21: "FTP - Consider disabling or securing with SFTP",
    22: "SSH - Ensure strong password or key authentication",
    23: "Telnet - Insecure, replace with SSH",
    25: "SMTP - Secure with TLS/SSL",
    80: "HTTP - Use HTTPS instead",
    110: "POP3 - Secure with TLS/SSL",
    143: "IMAP - Secure with TLS/SSL",
    443: "HTTPS - Ensure certificate validity",
    3306: "MySQL - Restrict access to internal network",
    3389: "RDP - Secure with strong credentials",
}

def scan_port(ip, port):
    """
    Scans a single port to check if it's open.
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)  # Timeout for the connection attempt
            result = s.connect_ex((ip, port))
            if result == 0:  # Port is open
                return port, True
    except Exception as e:
        return port, False
    return port, False

def scan_ports(ip, start_port, end_port):
    """
    Scans a range of ports on the target IP.
    """
    open_ports = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        future_to_port = {
            executor.submit(scan_port, ip, port): port for port in range(start_port, end_port + 1)
        }
        for future in concurrent.futures.as_completed(future_to_port):
            port, is_open = future.result()
            if is_open:
                open_ports.append(port)
    return open_ports

def analyze_vulnerabilities(open_ports):
    """
    Analyzes open ports for potential vulnerabilities.
    """
    vulnerabilities = {}
    for port in open_ports:
        if port in COMMON_PORTS:
            vulnerabilities[port] = COMMON_PORTS[port]
        else:
            vulnerabilities[port] = "Open port, ensure it's required and secured."
    return vulnerabilities

def save_report(ip, open_ports, vulnerabilities, filename="scan_report.json"):
    """
    Saves the scan report to a JSON file.
    """
    report = {
        "target_ip": ip,
        "open_ports": open_ports,
        "vulnerabilities": vulnerabilities,
    }
    with open(filename, "w") as file:
        json.dump(report, file, indent=4)
    print(f"Scan report saved to {filename}")

def main():
    print("Welcome to the Python Port Scanner!")
    ip = input("Enter the target IP address: ")
    start_port, end_port = 1, 999

    print(f"Scanning ports {start_port}-{end_port} on {ip}...")
    open_ports = scan_ports(ip, start_port, end_port)
    print(f"Scan complete. Open ports: {open_ports}")

    print("Analyzing vulnerabilities...")
    vulnerabilities = analyze_vulnerabilities(open_ports)

    print("Vulnerabilities found:")
    for port, issue in vulnerabilities.items():
        print(f"  Port {port}: {issue}")

    save_report(ip, open_ports, vulnerabilities)

if __name__ == "__main__":
    main()
